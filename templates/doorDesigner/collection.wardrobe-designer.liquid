<div class="container-fluid">
  <div class="row mt30">
    <div class="col-lg-8 order-lg-2">
      {% include 'app-doors-column-designer' %}
    </div>
    <div class="col-lg-2 order-lg-1">
      {% include 'app-doors-column-config' %}
    </div>
    <div class="col-lg-2 order-lg-3">
      {% include 'app-doors-column-order' %}
    </div>
  </div>

  <hr>
  {% comment %}Center align{% endcomment %}
  {% include 'app-helper-links' %}
</div>

{% comment %}Liquid variable loading{% endcomment %}

{% comment %}colonial{% endcomment %}
{% capture buckingham %}{% include "app-insert-colonial-buckingham" %}{% endcapture %}
{% capture rochester %}{% include "app-insert-colonial-rochester" %}{% endcapture %}
{% capture sandringham %}{% include "app-insert-colonial-sandringham" %}{% endcapture %}
{% capture cromwell %}{% include "app-insert-colonial-cromwell" %}{% endcapture %}
{% capture hastings %}{% include "app-insert-colonial-hastings" %}{% endcapture %}

<script id="liquidDoorDesignerJavascriptLoading">
var colonial = {
	class: 'colonial',
	buckingham: '{{ buckingham | strip_newlines | remove: "	" | remove: "		" | remove: "			" }}',
    rochester: '{{ rochester | strip_newlines | remove: "	" | remove: "		" | remove: "			" }}',
	sandringham: '{{ sandringham | strip_newlines | remove: "	" | remove: "		" | remove: "			" }}',
    cromwell: '{{ cromwell | strip_newlines | remove: "	" | remove: "		" | remove: "			" }}',
    hastings: '{{ hastings | strip_newlines | remove: "	" | remove: "		" | remove: "			" }}'
};
</script>

<script id="doorDesignerManagerScript">
	(function () {
		'use strict'

		class Door {
			constructor(idNumber)
			{
				this.setDoorIdNumber(idNumber);
				this.setDoorHtmlId("door" + idNumber);
				this.setInsertName("mirror");
			}

			setDoorIdNumber(idNumber)
			{
				this.doorIdNumber = idNumber;
			}

			getDoorIdNumber()
			{
				return this.doorIdNumber;
			}
			
			setDoorHtmlId(doorHtmlId)
			{
				this.doorHtmlId = doorHtmlId;
			}

			getDoorHtmlId()
			{
				return this.doorHtmlId;
			}

			setInsertName(name)
			{
				this.insertName = name;
			}

			getInsertName()
			{
				return this.insertName;
			}
		}

		let doors = [new Door(0), new Door(1)]; // we start with 2 doors.
		
		let submitDimensionsFormElement = document.getElementById("submitDimensionsForm");
		let addToCartFormElement = document.getElementById("addToCartForm");
		let doorAppElement = document.getElementById("doorApp");
		let submitButtonElement = document.getElementById("submitButton");
		let doorTemplateElement = document.getElementById("doorTemplate");
		let topWidthElement = document.getElementById("topWidth");
		let bottomWidthElement = document.getElementById("bottomWidth");
		let leftHeightElement = document.getElementById("leftHeight");
		let rightHeightElement = document.getElementById("rightHeight");
		let numberOfDoorsElement = document.getElementById("numberOfDoors");
		let trackStyleElement = document.getElementById("trackStyle");
		let frameStyleElement = document.getElementById("frameStyle");
		let doorsSubContainerElement = document.getElementById("doorsSubContainer");
		let errorMessageElement = document.getElementById("errorMessage");
		let infoMessageElement = document.getElementById("infoMessage");
		let warningMessageElement = document.getElementById("warningMessage");
		let accordionConfigElement = document.getElementById("accordionConfig");
		let modalInsertSelectorElement = document.getElementById('insertSelector');
		let placeOrderButtonElement = document.getElementById('addToCart');
		let formsNeedValidation = document.querySelectorAll('.needs-validation');

		let doorElements = doorsSubContainerElement.getElementsByClassName("added");
		let modalInsertSelectorOptionElements = modalInsertSelectorElement.querySelectorAll("[data-insert]");

		let accordionDisplayed = false;
		let orderValid = false;
		let selectedDoorIndex = 0;
		let selectedDoorInsertMaterial;

		let mediaQueryLandscape = window.matchMedia("(orientation: landscape)");

		document.addEventListener('DOMContentLoaded', () => {
			theme.services.doorDesignerService = new DoorDesignerService();
			theme.services.cartService = new CartService();

			init();
  		});

		function init() {
			submitDimensionsFormElement.addEventListener("submit", onDimensionsFormSubmitted);
			addToCartFormElement.addEventListener("submit", onAddToCartFormSubmitted);
			numberOfDoorsElement.addEventListener("change", onNumberOfDoorsSelectorChanged);
			modalInsertSelectorElement.addEventListener("show.bs.modal", onModalShown);

			placeOrderButtonElement.disabled = true;
			
			// Form validation listeners.
			Array.prototype.slice.call(formsNeedValidation)
				.forEach(function (form) {
					form.addEventListener('submit', function (event) {
						if (!form.checkValidity()) {
							event.preventDefault();
							event.stopPropagation();
						}
		
						form.classList.add('was-validated');
					}, false)
				});

			for(let i = 0; i < modalInsertSelectorOptionElements.length; i++)
			{
				modalInsertSelectorOptionElements[i].addEventListener("click", onDoorInsertChosen);
			}

			numberOfDoorsElement.value = doors.length;
			setDoorQuantity(doors.length);
		}

		function onDimensionsFormSubmitted(event) {
			submitDimensions();
		}

		function onAddToCartFormSubmitted(event) {
			addToCart();
		}

		function onNumberOfDoorsSelectorChanged(event) {
			setDoorQuantityFromControl();
		}

		function onDoorInsertChosen(event) {
			let insert = event.currentTarget.getAttribute("data-insert");

			setDoorInsert(selectedDoorIndex, insert);
		}

		function onModalShown(event) {
			selectedDoorIndex = event.relatedTarget.getAttribute("data-door-id");
			selectedDoorInsertMaterial = event.relatedTarget.getAttribute("data-bs-door-insert-material");
		}

		function submitDimensions() {
			event.preventDefault();
			
			let topWidth = topWidthElement.value;
			let bottomWidth = bottomWidthElement.value;
			let leftHeight = leftHeightElement.value;
			let rightHeight = rightHeightElement.value;
			
			setLoading();

			theme.services.doorDesignerService.suggestDoorQuantity(topWidth, bottomWidth, leftHeight, rightHeight)
				.then((response) => {
					resetError();
					resetInfo();
					resetWarning();

					numberOfDoorsElement.value = response.quantity;
					setDoorQuantity(response.quantity);
					setInfo("We recommend <b>" + response.quantity + "</b> doors for a door opening of size " + response.quotingWidth + "mm * " + response.quotingHeight + "mm. However, the number of doors may be changed in Step 1.");

					placeOrderButtonElement.disabled = false;

					if(response.warning)
					{
						setWarning(response.warning);
					}

					if(response.mustAcknowledgeWarningToContinue)
					{
						requireAcknowledgement();
					}

					resetLoading();

					setDoorOpeningVisualRatio(response.quotingWidth, response.quotingHeight);

					fadeAccordionConfigIn();

				})
				.catch((err) => {
					handleError(err);

					resetInfo();
					resetWarning();
					resetLoading();
				});
		}

		function addToCart() {
			event.preventDefault();

			let topWidth = topWidthElement.value;
			let bottomWidth = bottomWidthElement.value;
			let leftHeight = leftHeightElement.value;
			let rightHeight = rightHeightElement.value;

			let dtoDoors = [];
			doors.forEach((door) => {
				let dtoDoor = {
					SequenceOrderId: door.getDoorIdNumber(),
					InsertMaterialSelected: door.getInsertName()
				};

				dtoDoors.push(dtoDoor);
			});

			let dto = {
				Doors: dtoDoors,
				DoorOpeningTopWidth: topWidth,
				DoorOpeningBottomWidth: bottomWidth,
				DoorOpeningLeftHeight: leftHeight,
				DoorOpeningRightHeight: rightHeight,
				FrameStyle: frameStyleElement.value,
				TrackStyle: trackStyleElement.value
			};

			theme.services.doorDesignerService.createAggregateProduct(dto)
				.then((response) => {
					theme.services.cartService.addToCart(response.customProductVariantId);
				})
				.catch((err) => {
					handleError(err, true);
				});
		}

		function handleError(errorResponse, preventFadeOut) {
			resetInfo();

			if(!preventFadeOut)
			{
				fadeAccordionConfigOut();
			}
			
			if(errorResponse.status == 404) {
				setError("Unfortunately this service is unavailable at present due to maintenance.  Please try again later.");

				return;
			}
			
			errorResponse.text()
				.then((receivedMessage) => {
					let message = receivedMessage;

					if(receivedMessage.includes("Could not create aggregate product"))
					{
						message = "A problem prevented us from being able to place your order.  Please call or email to assist further.";
					}

					setError(message);
				});
		}

		function fadeAccordionConfigIn() {
			if(!accordionDisplayed) {
				fadeIn(accordionConfigElement);
			}

			accordionDisplayed = true;
		}

		function fadeAccordionConfigOut() {
			if(accordionDisplayed) {
				fadeOut(accordionConfigElement);
			}

			accordionDisplayed = false;
		}

		function setError(message) {
			errorMessageElement.innerHTML = message;
			errorMessageElement.classList.remove("hidden");
		}

		function resetError() {
			errorMessageElement.innerHTML = "";
			errorMessageElement.classList.add("hidden");
		}

		function setInfo(message) {
			infoMessageElement.innerHTML = message;
			infoMessageElement.classList.remove("hidden");
		}

		function resetInfo() {
			infoMessageElement.innerHTML = "";
			infoMessageElement.classList.add("hidden");
		}

		function setWarning(message) {
			let warningSpan = document.createElement("span");
			warningSpan.classList.add("addedMessage");
			warningSpan.innerHTML = message;

			warningMessageElement.appendChild(warningSpan);
			warningMessageElement.classList.remove("hidden");
		}

		function resetWarning() {
			warningMessageElement.innerHTML = "";
			warningMessageElement.classList.add("hidden");
		}

		function requireAcknowledgement() {
			let ackCheckbox = document.createElement("input");
			ackCheckbox.type = "checkbox";
			ackCheckbox.id = "warningAcknowledged";

			let mustAcceptSpanMessage = document.createElement("span");
			mustAcceptSpanMessage.innerHTML = "&nbsp;&nbsp;Please tick the box to acknowledge: ";

			ackCheckbox.addEventListener("change", onWarningAcknowledgement);

			ackCheckbox.classList.add("addedAckWarning");

			warningMessageElement.appendChild(mustAcceptSpanMessage);
			warningMessageElement.appendChild(ackCheckbox);
			placeOrderButtonElement.disabled = true;
		}

		function onWarningAcknowledgement(event) {

			// TODO: if checked, enable button otherwise disable
			placeOrderButtonElement.disabled = false;
		}

		function setDoorQuantityFromControl() {
			let qty = numberOfDoorsElement.value;

			setDoorQuantity(qty);
		}

		function setLoading() {
			submitButtonElement.disabled = true;
			submitButtonElement.innerHTML = "Loading..";
		}

		function resetLoading() {
			submitButtonElement.disabled = false;
			submitButtonElement.innerHTML = "Submit";
		}

		function setDoorOpeningVisualRatio(width, height) {
			let widthVw = 0;
			let heightRatio = height / width;

			if(mediaQueryLandscape.matches)
			{
				widthVw = 30; // Must match CSS load value.
			}
			else {
				widthVw = 80; // Must match CSS load value.	
			}

			doorAppElement.style.height = `calc(${widthVw}vw * ${heightRatio})`;
		}

		function setDoorQuantity(qty)
		{
			if(qty > doors.length) {
				// Then we need to add additional doors to the existing array..
				let qtyToCreate = qty - doors.length;
				let j;
				let currentNumberOfDoors = doors.length;
				
				for(j = 0; j < qtyToCreate; j++)
				{
					let newDoorId = currentNumberOfDoors + j;
					
					doors.push(new Door(newDoorId));
				}
			}
			
			if(qty < doors.length) {
				// Then we need to remove doors from the existing array..
				let qtyToRemove = doors.length - qty;
				let j;
				
				for(j = 0; j < qtyToRemove; j++)
				{
					doors.pop();
				}
			}

			clearDoorHtmlElements();

			let doorIsBehind = true;
			let evenDoorWidth = 100 / qty;
			let doorQtyIsEven = qty % 2 == 0 ? true : false;
			
			let i;
			for (i = 0; i < doors.length; i++) {
				let currentDoorWidth = evenDoorWidth;
				
				if(doorIsBehind) {
					// The first door should be 'behind' and hence appear slightly thinner.
					currentDoorWidth = evenDoorWidth * 0.95;
				}
				else {
					// The next door should be 'in front' and hence appear slightly wider.
					currentDoorWidth = evenDoorWidth * 1.05;
				}
				
				if(!doorQtyIsEven && (i == (doors.length - 1))) {
					// If it's the last door and the qty is uneven, its width should be even (so the total adds to 100%).
					currentDoorWidth = evenDoorWidth;
				}
				
				let newDoorElement = doorTemplateElement.cloneNode(true);
				
				doorsSubContainerElement.appendChild(newDoorElement);
				
				let insertSelectorElements = newDoorElement.getElementsByClassName("insertSelector");
				let insertElements = insertSelectorElements[0].getElementsByClassName("insert");
				let doorDisplayNo = parseInt(doors[i].getDoorIdNumber(), 10) + 1;
				
				newDoorElement.id = doors[i].getDoorHtmlId();
				newDoorElement.title = "Click to change insert for door " + doorDisplayNo;
				newDoorElement.style = "width: " + currentDoorWidth + "%";
				newDoorElement.classList.add("added");
				newDoorElement.classList.remove("hidden");
				insertSelectorElements[0].setAttribute("data-door-id", doors[i].getDoorIdNumber());

				setDoorInsert(doors[i].getDoorIdNumber(), doors[i].getInsertName());
				doorIsBehind = !doorIsBehind;
			}

			doorElements = doorsSubContainerElement.getElementsByClassName("added");
		}

		function setDoorInsert(doorId, material) {
			let doorElementHtmlId = doors[doorId].getDoorHtmlId();

			let doorElement = document.getElementById(doorElementHtmlId);
			let insertSelectorElements = doorElement.getElementsByClassName("insertSelector");
			let insertElements = insertSelectorElements[0].getElementsByClassName("insert");
			let insertHtml = null;

			insertElements[0].className = "insert";
			doors[doorId].setInsertName(material);

			insertElements[0].innerHTML = "";
			insertElements[0].setAttribute("data-insert", doors[doorId].getInsertName());
			insertElements[0].classList.add(doors[doorId].getInsertName());
			
			if (material === 'buckingham') {
				insertElements[0].classList.add("colonial");
				insertHtml = colonial.buckingham;
			}
			else if (material === 'rochester') {
				insertElements[0].classList.add("colonial");
				insertHtml = colonial.rochester;
			}
			else if (material === 'sandringham') {
				insertElements[0].classList.add("colonial");
				insertHtml = colonial.sandringham;
			}
			else if (material === 'cromwell') {
				insertElements[0].classList.add("colonial");
				insertHtml = colonial.cromwell;
			}
			else if (material === 'hastings') {
				insertElements[0].classList.add("colonial");
				insertHtml = colonial.hastings;
			}

			if(insertHtml != null)
			{
				insertElements[0].innerHTML = insertHtml;
			}
		}

		function printDebugDoors() {
			let i;
			for(i = 0; i < doors.length; i++) {
				console.log("Door " + doors[i].getDoorIdNumber() + " htmlid: " + doors[i].getDoorHtmlId() + ". Insert: " + doors[i].getInsertName());
			}
		}

		function clearDoorHtmlElements()
		{
			let doorElements = doorsSubContainerElement.querySelectorAll(".added");
			let i;
			for (i = 0; i < doorElements.length; i++) {
				doorElements[i].parentNode.removeChild(doorElements[i]);
			}
		}

		function fadeOut(element) {
			var op = 1;  // initial opacity
			var timer = setInterval(function () {
				if (op <= 0.1) {
					op = 0;
					clearInterval(timer);
					element.style.display = 'none';
				}
				element.style.opacity = op;
				element.style.filter = 'alpha(opacity=' + op * 100 + ")";
				op -= op * 0.1;
			}, 20);
		}

		function fadeIn(element) {
			var op = 0.1;  // initial opacity
			element.style.display = 'block';
			var timer = setInterval(function () {
				if (op >= 1) {
					op = 1;
					clearInterval(timer);
				}
				element.style.opacity = op;
				element.style.filter = 'alpha(opacity=' + op * 100 + ")";
				op += op * 0.1;
			}, 20);
		}
	})();

</script>
